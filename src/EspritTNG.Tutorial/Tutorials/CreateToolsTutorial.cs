using System;
using System.Text;

namespace TutorialCSharp.Tutorials
{
    class CreateToolsTutorial : BaseTutorial
    {
        public CreateToolsTutorial(Esprit.Application app): base(app)
        {
        }

        //! [Code snippet]

        public void CreateTools()
        {
            var technologyUtility = Document.TechnologyUtility as EspritTechnology.TechnologyUtility;
            var toolEndMill = technologyUtility.CreateTechnology(EspritConstants.espTechnologyType.espToolMillEndMill, Document.SystemUnit);
            var toolDrill = technologyUtility.CreateTechnology(EspritConstants.espTechnologyType.espToolMillDrill, Document.SystemUnit);

            var parameter = toolEndMill.FindParameter("ToolID");
            if (parameter != null)
            {
                parameter.Value = "EM 3";
            }
            parameter = toolEndMill.FindParameter("Comment");
            if (parameter != null)
            {
                parameter.Value = "This endmill was added by C# tutorial extension";
            }
            parameter = toolEndMill.FindParameter("ToolNumber");
            if (parameter != null)
            {
                parameter.Value = 3;
            }
            parameter = toolEndMill.FindParameter("Coolant");
            if (parameter != null)
            {
                parameter.Value = EspritConstants.espCoolantType.espCoolantOn;
            }

            parameter = toolDrill.FindParameter("ToolID");
            if (parameter != null)
            {
                parameter.Value = "DR 4";
            }
            parameter = toolDrill.FindParameter("Comment");
            if (parameter != null)
            {
                var stringBuilder = new StringBuilder();
                stringBuilder.AppendLine("This drill was added by C# tutorial extension");
                stringBuilder.AppendLine("Notice how multiple line comments are generated by");
                stringBuilder.AppendLine("adding carriage return and line feed characters.");

                parameter.Value = stringBuilder.ToString();
            }
            parameter = toolDrill.FindParameter("ToolNumber");
            if (parameter != null)
            {
                parameter.Value = 4;
            }
            parameter = toolDrill.FindParameter("Coolant");
            if (parameter != null)
            {
                parameter.Value = EspritConstants.espCoolantType.espCoolantFlood;
            }

            var tools = Document.Tools as EspritTools.Tools;

            try
            {
                tools.Add(toolEndMill);
                tools.Add(toolDrill);
            }
            catch (Exception)
            {
                EspritApplication.EventWindow.AddMessage(EspritConstants.espMessageType.espMessageTypeWarning, "CreateToolsTutorial", "Exception occured - failed to add tool");
            }
        }

        //! [Code snippet]

        public override void Execute()
        {
            CreateTools();
        }

        public override string Name => "Create Tools";
        public override string HtmlPath => "html/create_tools_tutorial.html";

    }
}
